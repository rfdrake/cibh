#!/usr/bin/perl

# Copyright (C) 2000 Peter Whiting (Sprint)
# This module is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License as published by the Free Software Foundation; either
#  version 2 of the License, or (at your option) any later version.
#
# This module is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public
# License along with this library; if not, write to the
# Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.

# usage:
#   usage2fig [options] fig_filename (this outputs the new fig on stdout)
#             or
#   usage2fig [options] fig1 fig2 fig3...
#             this allows you to minimize the overhead of loading up the
#             alias hashes from the database - you only have to do it once
#             and then you can process multiple figs.

use strict;
use Getopt::Long;
use IO::File;
use CIBH::Config qw/ $default_options /;
use CIBH::Graphviz;
use CIBH::Logs;

# some ugly globals - these actually change.
# They are used because the alternatives were even uglier.
my ($date, $mdate, $cdate, $adate, $starting_color, $current_line, $opts);

use v5.14;

sub Main {

    $opts={shades=>20,
           data_path=>'.',
           map_path=>'.',
           log_glob=>'*',
           %{$default_options}};

    GetOptions($opts,
               "shades=i",  # number of shades
               "log_path=s",    # where to find the usage logs
               "log_glob=s",     # what the log filenames look like
               "default_line_color=s",
               "map_path=s",
               "chart_cgi=s",
               "usemin",    # usemin instead of max?
               "hide_urls", # hide lines with urls?
               "config=s",      # config file
               "data_path=s",   # base directory
               "debug:i");      # debug messages

    $opts->{debug}=1 if(defined $opts->{debug} and $opts->{debug}==0);
    $opts->{log_path}="$opts->{data_path}/logs"
        if not defined $opts->{log_path};

    $date=localtime(time);
    $mdate=''; # date current fig file was modified
    $cdate=''; # date current fig file was created
    $adate=''; # date current fig file was last accessed
    $starting_color=0;
    # used by: DrawScale, ShowScale, ModifyFig
    # set by:  ProcessFig
    undef $current_line;
    # used by: DrawScale, ShowScale
    # set by:  HandleString

    my $logs=CIBH::Logs->new( $opts );
    my $graphviz=CIBH::Graphviz->new( $opts );

    foreach my $input (@ARGV) {
        my ($output_fn)=reverse(split(/\//,$input));
        my $file = '';
        if ($input =~ /\.gv/) {
            $file = $graphviz->parse(file => $input, logs => $logs);
            $output_fn .= '.svg';
        } else {
            $file=ProcessFig($input,$logs);
            $output_fn .= '.used';
        }

        if(defined $opts->{stdout}) {
            print ref $file eq 'ARRAY' ? @{$file} : $file;
        } else {
            my $fh=IO::File->new("$opts->{map_path}/$output_fn", O_RDWR|O_CREAT) or
                die "Cannot open $opts->{map_path}/$output_fn for writing.";
            print $fh ref $file eq 'ARRAY' ? @{$file} : $file;
        }
    }
}

sub ProcessFig {
    my($filename,$logs)=(@_);
    my $start_color=32;
    my $xfig;

    my $fig_file = IO::File->new($filename);
    warn "$!: $filename\n", return if not defined $fig_file;

    my ($atime,$mtime,$ctime) = (stat($fig_file))[8,9,10];

    $adate=localtime($atime);
    $mdate=localtime($mtime);
    $cdate=localtime($ctime);


    # now read the xfig file
    # get past the header
    while(<$fig_file>) {
        push(@{$xfig},$_);
        last if(/^1200/);
    }
    # read past the color def stuff
    while(<$fig_file>) {
        if(my ($match)=/^0 (\d+)/) {
            $start_color=$match+1;
            push(@{$xfig},$_);
        } else {
            last;
        }
    }
    # now, $_ is the first line that isn't a color - the rest is fig

    # Set the global variable:
    $starting_color=$start_color;
    # this is used by DrawScale, ModifyFig, and ShowScale

    # put our color table in the fig
    ColorMap($xfig,$logs,$start_color);
    ReadLines($xfig,$fig_file,$logs,$_);

    # for now, just print the whole mess out.

    return $xfig;

}

sub ReadLines {
    my($lines,$fig_file,$logs,$line)=(@_);
    my($util,@starts,$start);

    $line=<$fig_file> if(not $line);

    do {
        if($line=~/^6 /) {
            push @{$lines},$line;
            push @starts,$#{$lines}+1;
        }
        elsif($line=~/^4 /) {
            my $tmp=HandleString($lines,$line,$logs);
            $util=$tmp if defined $tmp;
        }
        elsif($line=~/^-6$/) {
            push @{$lines},$line;
            $start=pop(@starts);
            ModifyFig($util,$lines,$start) if defined $util;
            undef $util;
        }
        else {
            push(@{$lines},$line);
        }
    } while ($line=<$fig_file>);
}

# All strings that started with # are processed special.  If the
# string starts with a #!, it is evaluated.  If the string is starst
# with a #< and ends with a >, then it is considered a url (which can
# be stripped, depending upon what the value of the nostrip option
# is).  Otherwise the string will be considered an regexp for filename
# matching.  The file(s) will eventually be opened and the rest of the
# compound will be recolored (in the case of lines) or string replaced
# (in the case of ## strings) to contain the value retrieved from the
# file(s).  An automatic url ref will be added to back ref the html
# page associated with the matching file.  If multiple files match, a
# new page will be created that provides a simple link to each page.


sub HandleString {
    my ($lines,$line,$logs)=(@_);

    # TODO
    # the following test could be spiffed up a bit - this one will match any string
    # with a # in it anywhere, but what we really want is a # as the first char
    # of the field containing the string.

    my $util;
    if(my ($str)=($line=~(/^[14] .* \#(.*)\\001/))) {
        if ($str =~ /^\s+?$/) {
            undef $line;
        } elsif(my ($cmd)=($str=~/^!(\".*\")/)) {
            my($rpl)=eval $cmd;
            $line=~s/ \#.*\\001/ $rpl\\001/;
        } elsif(($cmd)=$str=~/^!(.*)/) {
            $current_line=$line; # global that might be used by command
            $line=eval $cmd;
            undef $current_line;
        } elsif(my ($url)=($str=~/^<.*>$/)) {
            undef $line if($opts->{hide_urls});
        } elsif($str=~/^\#/) {
        } else {  #assume str is a regexp - replace it with a url
            my $files=$logs->GetFiles($str);
            if(@{$files}==0) {
                undef $line;
                warn "Didn't match anything for $str\n";
            } else {
                $util=$logs->GetUtilization($files);
                my $url=$logs->url($files);
                $line=~s/ \#.*\\001/ \#<$url>\\001/ if(not $opts->{hide_urls});
                undef $line if($opts->{hide_urls});
            }
        }
    }
    push(@{$lines},$line) if defined $line;
    return $util;
}

sub FilledBox
{
    my($x1,$y1,$x2,$y2,$c)=(@_);
    if($x1>$x2){($x2,$x1)=($x1,$x2);}
    if($y1>$y2){($y2,$y1)=($y1,$y2);}
    # this will replace the string that called us
    return("2 2 0 0 0 $c 0 0 20 0.000 0 0 -1 0 0 5",
       "\t$x1 $y1 $x2 $y1 $x2 $y2 $x1 $y2 $x1 $y1");
}

# This routine is somewhat of a hack - it actually makes use of
# the fact that it knows that it was called as a result of a
# line in an xfig file refrencing it - further, it knows
# a little about this line and scapes some info out of it
# that would be hard to get any other way - like where the
# text was located on the xfig grid.  It assumes that the
# global variable $current_line contains the contents of
# the line that caused it to be called.  It also assumes
# that the variable $tarting_color contains the index of
# the first user color that is available.

sub DrawScale
{
    return if(not defined $current_line);
    my($ang,$h,$w,$x,$y)=
        ($current_line=~/([\d.]+) \d+ (\d+) (\d+) (\d+) (\d+) \#\!/);
    my(@list,$i);
    $w/=$opts->{shades};
    $h*=(3/4);
    for($i=0;$i<$opts->{shades};$i++) {
        push(@list,
             FilledBox(int($x+cos($ang)*($i*$w)),
                   int($y-sin($ang)*($i*$w)),
                   int($x+cos($ang)*(($i+1)*$w)-sin($ang)*$h),
                   int($y-sin($ang)*(($i+1)*$w)-cos($ang)*$h),
                   $i+$starting_color));
    }
    return join("\n",@list,"\n");
}

# print out an xfig color map.  This should be in addition to any
# xfig color map currently in use.

sub ColorMap
{
    my($lines,$logs,$start)=(@_);
    # add a default line color for when we don't match a url (not currently used)
    push(@{$lines}, sprintf("0 %d %s\n", $start++, $opts->{default_line_color})) if ($opts->{default_line_color});
    my $i=0;
    for(@{$logs->color_map}) {
        push(@{$lines},sprintf("0 %d %s\n",$i+$start,$_));
        $i++;
    }
}

# walk through the lines fixing any that need to be changed according
# to the value in util.
sub ModifyFig {
    my($util,$lines,$start)=(@_);
    my $level=0;
    my $color;

    if (!defined($util) && $opts->{default_line_color}) {
        $color = $starting_color-1;
    } else {
        $color = int($util*($opts->{shades}-.001)/100)+$starting_color;
    }
    $util=int($util);
    for(my $i=$start;$i<@{$lines};$i++) {
        my @field=split(/ /,$lines->[$i]);
        $level++,next if($field[0])==6;
        $level--,next if($field[0])==-6;
        next if($level);
        # do we need to worry about lines that start with whitespace? (they should
        # not be messed with - even if they start with a 2.)
        if($field[0]==2) {
            $field[5]=$field[4]=$color;
            $lines->[$i]=join(" ",@field);
        } elsif($field[0]==4 && $field[13] eq "\#\#\\001\n") {
            $field[13]="$util\\001\n";
            $lines->[$i]=join(" ",@field);
        }
    }
}

Main();
1;
