#!/usr/bin/perl

# Copyright (C) 2000 Peter Whiting
# This module is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License as published by the Free Software Foundation; either
#  version 2 of the License, or (at your option) any later version.
#
# This module is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public
# License along with this library; if not, write to the
# Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.

use strict;
use warnings;
use CIBH::Config qw/ $default_options /;
use CIBH::DS;
use AE;
use AnyEvent::SNMP;
use CIBH::SNMP qw ( load_snmp_config );
use Net::SNMP;
use SNMP::OID::Translate qw ( translateObj );
use Getopt::Long;
use Math::BigInt try => 'GMP, Pari';

sub Main {
    my $opts = $default_options;

    GetOptions($opts,
               "config=s",      # config file
               "log=s",         # log file
               "stdout:i",      # dump to stdout instead of log file
               "config_path=s", # config directory
               "log_path=s",    # log directory
               "data_path=s",   # data directory
               "domain=s",      # domain name of router
               "rtr=s",         # router to examine
               "community=s",   # router community string
               "debug:i",       # debug messages
               "noaddress",     # don't collect addresses for aliases
               "accept=s",      # regexp for accepted interfaces
               "reject=s",      # regexp for rejected interfaces
               "noshutdown");   # don't poll shutdown interfaces?

    $opts->{debug}=1 if(defined $opts->{debug} and $opts->{debug}==0);
    $opts->{domain}=".$opts->{domain}"
        if defined $opts->{domain} and substr($opts->{domain},0,1) ne ".";

    CIBH::DS::load_ds($opts->{datastore});

    my $cv = AE::cv;
    my $log = {};
    my $count = 0;
    push(@ARGV, $opts->{rtr}) if ($opts->{rtr});
    die "No router specified\n" if not (@ARGV);
    foreach my $r (@ARGV) {
        $r=~s/\.snmp\.config$//g;

        my $config=load_snmp_config($r,$opts);

        # there should really only be one router per config, but loop for
        # fun anyway...
        foreach my $rtr (keys %{$config}) {
            warn "router: $rtr\n" if $opts->{debug};
            $count += SnmpPollRouter($cv,$log,$rtr,$config->{$rtr},$opts);
        }
    }
    $cv->recv if ($count);
    # this is awkward, and I hope it goes away soon.  We should replace the
    # whole thing with one giant file data.json or something.
    # well, maybe not.  But I want something that is accessible via JS and
    # this doesn't work.  We could go back to databases but that complicates
    # things.  The goal is that we don't need all these files, but we also
    # don't send huge amounts of data if we're compiling a small map.

    foreach my $host (keys %$log) {
        my $contents = { %{$log->{$host}} };
        CIBH::Config::save_file("$opts->{log_path}/$host.snmp.log",$contents,'log',$opts);
    }
}

=head2 SnmpPollRouter
    SnmpPollRouter($snmp,$host,$config,$opts);

This will figure out what OIDS we are interested in by looking at the config,
then add the router to the schedule to be polled.  Once the polling completes
the values are processed via the $store callback.

=cut

sub SnmpPollRouter {
    my($cv,$log,$rtr,$config,$opts)=(@_);

    my $snmp = CIBH::SNMP->new( hostname => $rtr, %$opts, cv => $cv );
    return 0 if !defined $snmp;

    my $oids;
    our $metrics; # needed for translate() below, which is needed by the $store callback
    foreach my $metric (keys %{$config}) {
        if (defined $config->{$metric}->{oid}) {
            my $oid=$config->{$metric}->{oid};
            push @$oids,$oid;
            $metrics->{$rtr}{$oid}=$metric;
            warn "pushing $oid and $metric\n" if $opts->{debug};
        }
    }

    my $translate = sub {
        my ($host, $oid) = @_;
        return $metrics->{$host}{$oid} if ($metrics->{$host}{$oid});

        my ($tag,$idx) = split(/\./, translateObj($oid),2);
        return $metrics->{$host}{$tag} if (defined($metrics->{$host}{$tag}));
        return $metrics->{$host}{"$tag.$idx"} if (defined($metrics->{$host}{"$tag.$idx"}));
        # this should never happen.  If it does the tag translation error will
        # probably follow..
        warn "$host: couldn't find metric for OID $oid ($tag)\n";
    };

    my $store = sub {
        my $session = shift;
        my $host = $session->hostname;
        my $results = $session->var_bind_list;

        if(!defined $results) {
            warn "$host failed with this error: ". $session->error if $opts->{debug};
            $cv->end;
            return;
        }

        while(my ($oid, $val) = each %{$results}) {
            my $tag = $translate->($host,$oid);
            my $hash=$config->{$tag};
            if (!defined($hash)) {
                warn "Tag translation error: host = $host, oid = $oid, tag = $tag, val = $val\n";
                $cv->end;
                return;
            }
            if ($val eq "noSuchObject") {
                warn "Value for $oid not found ($val).  Interface may be missing, try running build-snmp-config\n";
                next;
            }
            my $file="$rtr/$tag";
            $hash->{value}=Math::BigInt->new($val);
            $hash->{spikekiller}=$opts->{spikekiller};
            $hash->{file}="$opts->{data_path}/$file";
            warn "$hash->{command}->()" if($opts->{debug});
            # call the sub by name.  This doesn't violate strict 'refs'
            # but for added safety we might want to switch to dispatch tables
            # so we aren't allowing arbitrary method execution here.
            my $value = &{\&{$hash->{command}}}($hash);
            if($hash->{max}) {
                # once we get here we should not need BigInt anymore, and we
                # need a real number to pass to Data::Dumper
                $value=$value->numify() if ref($value) eq 'Math::BigInt';
                my $usage=$value/$hash->{max};
                $log->{$host}->{$file}->{usage}=$usage;
            }
            $log->{$host}->{$file}->{host}=$host;
            $log->{$host}->{$file}->{desc}=$hash->{desc} if $hash->{desc};
            $log->{$host}->{$file}->{addr}=$hash->{addr} if $hash->{addr};
            $log->{$host}->{$file}->{prefix}=$hash->{prefix} if $hash->{prefix};
        }
        $cv->end;
    };

    # I tried to implement the "best" way of doing this but we don't have
    # enough information.  We need to know OID length and type for outgoing
    # requests and length + type for reply.  The naive solution is to keep the
    # number of oid's per request to a low amount (50 seems to work).

    while ((my @vbl = splice(@$oids, 0, 50))) {
        $snmp->queue({ -varbindlist => \@vbl, -callback => $store, cv => $cv });
    }
    return 1;
}

Main;
