#!/usr/bin/perl

use strict;
use warnings;
use CIBH::Config qw ( $default_options );
use CIBH::Fig;
use IO::File;
use Mojolicious::Lite;

my $opts={ %{$default_options} };  # , $param::opts ? %{$param::opts} : {} };
my $author=$opts->{contact};
my $dir=$opts->{'map_path'};

app->secrets(['Change this if you run standalone']);
app->config(hypnotoad => {listen => ['http://*:80']});

get '/' => sub {
    my $self = shift;
    my $network = $self->param('net') || $opts->{network};
    my $file = $self->param('file');

    if (!defined $file || (! -r "$dir/$file.fig.used" && ! -r "$dir/$file.gv.svg")) {
        opendir(THISDIR,"$dir");
        my @allfiles=grep(/\.fig\.used$/ || /\.gv\.svg$/,readdir(THISDIR));
        closedir(THISDIR);

        my $files = [];
        foreach my $file (sort @allfiles) {
            warn "$file\n" if $opts->{debug};
            ($file)=($file=~/^(.*)(\.fig\.used|\.gv\.svg)/);
            push @$files,$file;
        }
        $self->stash(files => $files);
        $self->render('maplist');
    } elsif ( -r "$dir/$file.gv.svg") {
        open my $fh, '<', "$dir/$file.gv.svg" or die "Can't open $file.gv.svg";
        read $fh, my $buffer, -s $fh or die "Couldn't read file: $!";
        close $fh;
        $self->res->headers->header('Refresh' => '300')->expires('now')->content_type('image/svg+xml');
        $self->render(text => $buffer);
    } else {
        my $cat=$self->param('td') ? $opts->{script_path}.'/3d':'/bin/cat';
        my $fh=new IO::File("$cat $dir/$file.fig.used|") or die "Can't open $file.fig.used";
        my @data=<$fh>;
        my $fig=new CIBH::Fig(fig=>[@data]);

        if ($self->param('mode') eq 'png') {
            $fig->BuildImage;
            $self->res->headers->expires('now')->content_type('image/png');
            $self->render(data => $fig->png);
        } else {
            my $title = $self->param('title') || $opts->{map_title} || 'Barn Mapping';
            $fig->BuildMap;
            $self->res->headers->header('Refresh' => '300')->expires('now');
            $self->stash('title' => $title);
            $self->stash('pngurl' => $self->url_for('/')->query(file => $file, mode => 'png'));
            $self->stash('map', $fig->csImageMap);
            $self->render('fig_image_map');
        }

    }
};

app->start;


__DATA__
@@ maplist.html.ep
<!doctype html><html>
<head>
<title>Barn Mapping</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
</head>
<style>
div#columns {
    padding: 0px 10% 0px 10%;
}

div#columns ul {
    -webkit-columns: 120px 10;
       -moz-columns: 120px 10;
            columns: 120px 10;
         list-style: none;
             margin: 0;
            padding: 0;
}
</style>
<body>
<center><h1>Available Maps</h1>
<div id="columns">
<ul>
% foreach my $file (@$files) {
<li><%= link_to url_for->query(file => $file)->to_abs => begin %><%= $file %><% end %></li>
% }
</ul>
</div>
</center>
</body>
</html>
@@ fig_image_map.html.ep
<!doctype html>
<HTML>
<head>
<title><%= $title %></title>
</head>
<body>
<img border=0 src="<%== $pngurl %>" usemap="#mymap"/>
<map name=mymap>
<%== $map %>
</map>
</body>
</html>

