#!/usr/bin/perl

use strict;
use warnings;
use CIBH::Datafile;
use Mojolicious::Lite;
use Time::Local;
use CIBH::Config qw / $default_options /;

app->secrets(['Change this if you run standalone']);
app->config(hypnotoad => {listen => ['http://*:80']});

my $opts = {
    %{$default_options},
};

sub build_chart_list {
    my $rtr = shift;
    my $config=require "$opts->{config_path}/$rtr.snmp.config";
    my $files = ();
    my $done;
    foreach my $file (sort (keys %{$config->{$rtr}})) {
        next if not defined $config->{$rtr}->{$file}->{iface};
        my $iface=$config->{$rtr}->{$file}->{iface};
        next if $done->{$iface++};
        push(@$files, { file => "$rtr/$file", iface => $iface,
                       desc => $config->{$rtr}->{$file}->{desc},
                       addr => $config->{$rtr}->{$file}->{addr},
                       prefix => $config->{$rtr}->{$file}->{prefix}
                     });
    }
    push(@$files, { file => "$rtr/cpu.1m", iface => 'CPU', desc => "cpu utilization on $rtr" });
    my @all = map { $_->{file} } @$files;
    push(@$files, { file => join(',',@all), iface => 'All' });

    return $files;
}


get '/' => sub {
    my $self = shift;
    $self->res->headers->expires('now');
    if ($self->param('graph')) {
        my ($width, $height) = split(',', $self->param('size') || '960,500');
        return $self->render('graph');
    }

    if ($self->param('rtr') && !$self->param('file')) {
        my $r = $self->param('rtr');
        $self->stash(rtr => $r);
        $self->stash(files => build_chart_list($r));
        return $self->render('chartlist');
    }
    if (!$self->param('file')) {
        my(@hosts)=glob("$opts->{config_path}/*.snmp.config");
        $self->stash('files' => [map { my ($f)=($_=~ /$opts->{config_path}\/(.*)\.snmp\.config/); } @hosts]);
        return $self->render('rtrlist');
    }

    my $rtrs;
    my $stop = $self->param('stop') || time;
    my $span = $self->param('span') || 86400;
    my $files = $self->every_param('file');
    if ($files->[0] =~ /,/ && scalar @$files == 1) {
        $files = [ split(/,/, $files->[0]) ];
    }

    foreach my $filepath (@$files) {
        my ($rtr,$file) = ($filepath =~/^(.*)\/(.*)$/);
        next if $rtrs->{$rtr};
        $rtrs->{$rtr}={};

        my ($config)=do "$opts->{config_path}/$rtr.snmp.config";
        my $iface = $config->{$rtr}->{$file}->{iface};
        my @files;
        foreach my $f (keys %{$config->{$rtr}}) {
            no warnings 'uninitialized';
            if ($config->{$rtr}->{$f}->{iface} eq $iface || $config->{$rtr}->{$f}->{cpuave} == 5) {
                push(@files, "$rtr/$f");
            }
        }

        $rtrs->{$rtr}->{iface}=$iface;
        $rtrs->{$rtr}->{files}=\@files;
        $rtrs->{$rtr}->{scale}=$config->{$rtr}->{$file}->{max};
        $rtrs->{$rtr}->{$iface}->{desc}=$config->{$rtr}->{$file}->{desc};
    }
    $self->stash(span => $span, stop => $stop, routers => $rtrs);
    $self->render('chart');
};

get '/js/graph.js' => 'graph';

get '/data' => sub {
    my $self=shift;
    my $stop = $self->param('stop');
    my $span = $self->param('span');
    my $files = $self->every_param('files');
    my $output;
    foreach my $file (@$files) {
        my ($ext)=($file =~ /.*(in|out|cpu)(?:\.5m)?$/);

        map { $output->{$_->[0]}->{$ext}=$_->[1];
              $output->{$_->[0]}->{time}=$_->[0];
            } @{CIBH::Datafile->new(
                    filename=>"$opts->{data_path}/$file"
                )->GetValues($stop-$span, $stop)};
    }
    my @array;
    # reformat the data from the 3 files as an array
    foreach my $time (sort keys %{$output}) {
        push(@array, $output->{$time});
    }
    return $self->render(json => \@array);
};

app->start;

__DATA__
@@ rtrlist.html.ep
<!doctype html>
<html>
<head>
<title>Available Routers</title>
</head>
<style>
div#columns {
    padding: 0px 10% 0px 10%;
}

div#columns ul {
    -webkit-columns: 120px 10;
       -moz-columns: 120px 10;
            columns: 120px 10;
         list-style: none;
             margin: 0;
            padding: 0;
}
</style>
<body>
<center><h1>Available Routers</h1></center>
<div id="columns">
<ul>
% foreach my $file (@$files) {
<li><%= link_to url_for->query(rtr => $file )->to_abs => begin %><%= $file %><% end %></li>
% }
</ul>
</div>
</body>
</html>
@@ chartlist.html.ep
<!doctype html>
<html>
<head>
<title>Available Charts</title>
</head>
<body>
<style>
td#header {
    background-color: #99cccc;
    text-align: center;
    font-size: 1.5em;
    margin: .75em 0;
    padding: 1em 0 1em 0;
    font-weight: bold;
}

td {
    background-color: #cccccc;
}

th {
    background-color: #99cccc;
}
</style>
<table>
<tr><td id="header" colspan=4>Charts available on <%= $rtr %></td></tr>
<tr><th>Name</th><th>Description</th><th>Address</th><th>Network</th></tr>
% foreach my $file (@$files) {
<tr><td>
<%= link_to url_for->query(rtr => $rtr, file => $file->{file} )->to_abs => begin %><%= $file->{iface} %><% end %></td>
<td><%= $file->{desc} %></td>
<td><%= $file->{addr} %></td>
<td><%= $file->{prefix} %></td>
</tr>
% }

</table>
</body>
</html>
@@ graph.html.ep
function graph(element, datapath, scale, tspan=86400, gwidth=960, gheight=500) {

    var margin = {top: 20, right: 40, bottom: 30, left: 50},
        width = gwidth - margin.left - margin.right,
        height = gheight - margin.top - margin.bottom;

    var x = d3.time.scale()
        .range([0, width]);

    var y = d3.scale.linear()
        .range([height, 0]);

    var y1 = d3.scale.linear()
        .range([height,0]);

    var xAxis = d3.svg.axis()
        .scale(x)
        .orient("bottom");

    var yAxis = d3.svg.axis()
        .scale(y)
        .tickFormat(d3.format(' s'))    // converts yAxis scale to SI units (10M instead of 10,000,000)
        .orient("left");

    var yAxisRight = d3.svg.axis()
        .scale(y1)
        .orient("right");

    var inputline = d3.svg.line()
        .defined(function(d) { return !isNaN(d['in']); })
        .x(function(d) { return x(d['time']); })
        .y(function(d) { return y(d['in']); });

    var outputline = d3.svg.line()
        .defined(function(d) { return !isNaN(d['out']); })
        .x(function(d) { return x(d['time']); })
        .y(function(d) { return y(d['out']); });

    var cpuline = d3.svg.line()
        .defined(function(d) { return !isNaN(d['cpu']); })
        .x(function(d) { return x(d['time']); })
        .y(function(d) { return y1(d['cpu']); });

    var area = d3.svg.area()
        .defined(inputline.defined())
        .x(function(d) { return x(d['time']); })
        .y0(height)
        .y1(function(d) { return y(d['in']); });

    var svg = d3.select(element).append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
      .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");


    d3.json(datapath, function(error, json_data) {
      var span = 1/(width - margin.left - margin.right) * tspan;
      var timebase = json_data[0]['time'];

      // this is like Datafile::Sample
      //   the idea is that we have samples from input, output or cpu that are recorded at different timestamps.
      //   if we don't do something about this we would have holes in the graphs, so we're going to average each
      //   of these based on our graph width and timespan interval.
      var data = d3.nest()
           .key(function(d) { if (d['time'] - timebase > span) { timebase = d['time'] }; return timebase; })
           .rollup(function(d) {
                 return { in: d3.mean(d, function(g) { return +g['in']; }),
                          out: d3.mean(d, function(g) { return +g['out']; }),
                          cpu: d3.mean(d, function(g) { return +g['cpu']; }) }
           }).entries(json_data);

      data.forEach(function(d) {
           d['time'] = new Date(d.key*1000);
           d['in'] = +d.values['in'];
           d['out'] = +d.values['out'];
           d['cpu'] = +d.values['cpu'];
      });

      x.domain(d3.extent(data, function(d) { return d['time']; }));
      y.domain([0, scale ]);
      y1.domain([0, 100 ]);

      svg.append("g")
          .attr("class", "x axis")
          .attr("transform", "translate(0," + height + ")")
          .call(xAxis);

      svg.append("g")
          .attr("class", "y axis")
          .call(yAxis);

      svg.append("g")
          .attr("class", "y axis")
          .attr("transform", "translate(" + width + " ,0)")
          .style("fill", "red")
          .call(yAxisRight);

      svg.append("g")
        .attr("class", "grid")
        .call(d3.svg.axis()
            .scale(y1)
            .orient("left")
            .ticks(10)
            .tickSize(-width, 0, 0)
            .tickFormat("")
        );

      svg.append("path")
          .datum(data)
          .attr("class", "area")
          .attr("d", area);

      svg.append("path")
          .datum(data)
          .attr("class", "line in_line")
          .attr("d", inputline);

      svg.append("path")
          .datum(data)
          .attr("class", "line out_line")
          .attr("d", outputline);

      svg.append("path")
          .attr("class", "line cpu_line")
          .attr("d", cpuline(data));

      svg.append("g")
        .attr('class','date_line')
        .attr("transform", "translate(0," + height + ")")
        .call(d3.svg.axis()
            .scale(x)
            .orient("bottom")
            .ticks(1)
            .tickSize(-height, 0, 0)
            .tickFormat("")
        );

    });
}
@@ chart.html.ep
<!DOCTYPE html>
<head>
<meta charset="utf-8">
<title>multiple files</title>
</head>
<style>

body {
  font: 12px times;
}

.area {
    fill: lightsteelblue;
    stroke-width: 0;
}

.axis path,
.axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

.x.axis path {
  display: none;
}

.line {
  fill: none;
  stroke-width: 1.5px;
}

.in_line {
    stroke: steelblue;
}

.out_line {
    stroke: green;
}

.cpu_line {
  stroke: red;
}

.date_line .tick {
  stroke: black;
  stroke-opacity: 0.7;
  shape-rendering: crispEdges;
}
.date_line path {
  stroke-width: 0;
}

.grid .tick {
  stroke: lightgrey;
  stroke-opacity: 0.7;
  shape-rendering: crispEdges;
}
.grid path {
  stroke-width: 0;
}
</style>
<script src="http://d3js.org/d3.v3.js"></script>
<script>window.d3 || document.write( '<script src="/js/d3.v3.js" >\x3c/script>' );</script>
<script src="<%= url_for('/js/graph.js'); %>"></script>

% foreach my $rtr (sort keys %$routers) {
<br>
     Interface Utilization Chart<br>
            <%= $rtr %><br>

% my $iface = $routers->{$rtr}->{iface};
            <%= $iface %><br>
            <%= $routers->{$rtr}->{$iface}->{desc} %><br>

        timebegin --- timeend<br>
        <div class="graphdiv"></div>

<script>
    graph('.graphdiv', '<%== url_for('/data')->query('files' => $routers->{$rtr}->{files}, stop => $stop, span => $span); %>', <%= $routers->{$rtr}->{scale} %>, <%= $span %>);
</script>
% }
