#!/usr/bin/perl

use strict;
use warnings;
use CIBH::Datafile;
use Mojolicious::Lite;
use Time::Local;
use CIBH::Config qw / $default_options /;

app->secrets(['Change this if you run standalone']);
app->config(hypnotoad => {listen => ['http://*:80']});

my $opts = {
    %{$default_options},
};

sub build_chart_list {
    my $rtr = shift;
    my $config=do "$opts->{config_path}/$rtr.snmp.config";
    my $files = ();
    my $done;
    foreach my $file (sort (keys %{$config->{$rtr}})) {
        next if not defined $config->{$rtr}->{$file}->{iface};
        my $iface=$config->{$rtr}->{$file}->{iface};
        next if $done->{$iface};
        push(@$files, { file => "$rtr/$file", iface => $iface,
                       desc => $config->{$rtr}->{$file}->{desc},
                       addr => $config->{$rtr}->{$file}->{addr},
                       prefix => $config->{$rtr}->{$file}->{prefix}
                     });
        $done->{$iface}=1;
    }
    push(@$files, { file => "$rtr/cpu.1m", iface => 'CPU', desc => "cpu utilization on $rtr" });
    my @all = map { $_->{file} } @$files;
    push(@$files, { file => join(',',@all), iface => 'All' });

    return $files;
}


get '/' => sub {
    my $self = shift;

    my $network = $self->param('net') || $opts->{network};
    my ($data) = ($opts->{data_path} =~ m#(.*)/\S+/snmp#);
    if (! -d "$data/$network") {
        # return error if the directory doesn't exist to prevent eval'ing strange things.
        return $self->render(template => "exception", status => 501 );
    }
    $opts->{data_path}=eval "\"$opts->{data_path}\"";
    $opts->{config_path}=eval "\"$opts->{config_path}\"" ;

    $self->res->headers->expires('now');
    if ($self->param('graph')) {
        my ($width, $height) = split(',', $self->param('size') || '960,500');
        return $self->render('graph');
    }
    if ($self->param('rtr') && !$self->param('file')) {
        my $r = $self->param('rtr');
        $self->stash(rtr => $r);
        $self->stash(files => build_chart_list($r));
        return $self->render('chartlist');
    }
    if (!$self->param('file')) {
        my(@hosts)=glob("$opts->{config_path}/*.snmp.config");
        $self->stash('files' => [map { my ($f)=($_=~ /$opts->{config_path}\/(.*)\.snmp\.config/); } @hosts]);
        return $self->render('rtrlist');
    }

    my $rtrs;
    my $stop = $self->param('stop') || time;
    my $span = $self->param('span');
    my $files = $self->every_param('file');
    if ($files->[0] =~ /,/ && scalar @$files == 1) {
        $files = [ split(/,/, $files->[0]) ];
    }

    foreach my $filepath (@$files) {
        next if ($filepath =~ m#^/|\.\.#);
        my ($rtr,$file) = ($filepath =~/^(.*)\/(.*)$/);

        next if (! -f "$opts->{config_path}/$rtr.snmp.config");
        my ($config)=do "$opts->{config_path}/$rtr.snmp.config";
        my $iface = $config->{$rtr}->{$file}->{iface};
        next if ($rtrs->{$rtr}->{$iface});
        my @files;
        foreach my $f (keys %{$config->{$rtr}}) {
            no warnings 'uninitialized';
            if ($config->{$rtr}->{$f}->{iface} eq $iface || $config->{$rtr}->{$f}->{cpuave} == 5) {
                push(@files, "$rtr/$f");
            }
        }

        $rtrs->{$rtr}->{$iface}->{files}=\@files;
        $rtrs->{$rtr}->{$iface}->{scale}=$config->{$rtr}->{$file}->{max};
        $rtrs->{$rtr}->{$iface}->{desc}=$config->{$rtr}->{$file}->{desc};
    }

    $self->stash(span => $span, stop => $stop, routers => $rtrs, net => $network);
    $self->render('chart');
};

get '/data' => sub {
    my $self=shift;
    my $stop = $self->param('stop') || time;
    my $span = $self->param('span') || 86400;
    my $files = $self->every_param('files');
    my $output;
    foreach my $file (sort @$files) {
        next if ($file =~ m#^/|\.\.#);

        my $values = CIBH::Datafile->new(filename=>"$opts->{data_path}/$file")->GetValues($stop-$span, $stop);
        push(@{$output->{values}}, $values);
        push(@{$output->{files}}, $file);
    }

    return $self->render(json => $output);
};

app->start;

__DATA__
@@ rtrlist.html.ep
<!doctype html>
<html>
<head>
<title>Available Routers</title>
</head>
<style>
div#columns {
    padding: 0px 10% 0px 10%;
}

div#columns ul {
    -webkit-columns: 120px 10;
       -moz-columns: 120px 10;
            columns: 120px 10;
         list-style: none;
             margin: 0;
            padding: 0;
}
</style>
<body>
<center><h1>Available Routers</h1></center>
<div id="columns">
<ul>
% foreach my $file (@$files) {
<li><%= link_to url_for->query(rtr => $file )->to_abs => begin %><%= $file %><% end %></li>
% }
</ul>
</div>
</body>
</html>
@@ chartlist.html.ep
<!doctype html>
<html>
<head>
<title>Available Charts</title>
</head>
<body>
<style>
td#header {
    background-color: #99cccc;
    text-align: center;
    font-size: 1.5em;
    margin: .75em 0;
    padding: 1em 0 1em 0;
    font-weight: bold;
}

td {
    background-color: #cccccc;
}

th {
    background-color: #99cccc;
}
</style>
<table>
<tr><td id="header" colspan=4>Charts available on <%= $rtr %></td></tr>
<tr><th>Name</th><th>Description</th><th>Address</th><th>Network</th></tr>
% foreach my $file (@$files) {
<tr><td>
<%= link_to url_for->query(rtr => $rtr, file => $file->{file} )->to_abs => begin %><%= $file->{iface} %><% end %></td>
<td><%= $file->{desc} %></td>
<td><%= $file->{addr} %></td>
<td><%= $file->{prefix} %></td>
</tr>
% }

</table>
</body>
</html>
@@ graph.js
function graph(element, legend, datapath, scale, gwidth, gheight) {

    gwidth = gwidth || 960;
    gheight = gheight || 500;

    var colors = ['steelblue', 'green', 'red'];
    var scales = function(d) { return d != 2 ? line : lineRight };
    var get_value = function(d) { var k = Object.keys(d); return +d[k]; };

    var margin = {top: 20, right: 40, bottom: 30, left: 50},
        width = gwidth - margin.left - margin.right,
        height = gheight - margin.top - margin.bottom;

    var x = d3.time.scale()
        .range([0, width]);

    var y = d3.scale.linear()
        .range([height,0]);

    var y1 = d3.scale.linear()
        .range([height,0]);

    var xAxis = d3.svg.axis()
        .scale(x)
        .orient("bottom");

    var yAxis = d3.svg.axis()
        .scale(y)
        .tickFormat(d3.format(' s'))    // converts yAxis scale to SI units (10M instead of 10,000,000)
        .orient("left");

    var yAxisRight = d3.svg.axis()
        .scale(y1)
        .orient("right");

    var lineRight = d3.svg.line()
        .x(function(d) { return x(new Date(Object.keys(d)*1000)); })
        .y(function(d) { return y1(get_value(d)); });

    var line = d3.svg.line()
        .x(function(d) { return x(new Date(Object.keys(d)*1000)); })
        .y(function(d) { return y(get_value(d)); });

    var area = d3.svg.area()
        .x(function(d) { return x(new Date(Object.keys(d)*1000)); })
        .y0(height)
        .y1(function(d) { return y(get_value(d)); });

    var svg = d3.select(element).append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
      .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");


    d3.json(datapath, function(error, data) {
      x.domain(d3.extent(data['values'][0], function(d) { return new Date(Object.keys(d)*1000); }));
      y.domain([0, scale ]);
      y1.domain([0, 100 ]);

      svg.append("g")
          .attr("class", "x axis")
          .attr("transform", "translate(0," + height + ")")
          .call(xAxis);

      svg.append("g")
          .attr("class", "y axis")
          .call(yAxis);

      svg.append("g")
          .attr("class", "y axis")
          .attr("transform", "translate(" + width + " ,0)")
          .style("fill", "red")
          .call(yAxisRight);

      svg.append("g")
        .attr("class", "grid")
        .call(d3.svg.axis()
            .scale(y1)
            .orient("left")
            .ticks(10)
            .tickSize(-width, 0, 0)
            .tickFormat("")
        );

      svg.append("path")
          .datum(data['values'][0]) // area highlights the first graph
          .attr("class", "area")
          .attr("d", area);

      var l = svg.selectAll(".graphs")
            .data(data['values'])
            .enter().append("g");

      l.append("path")
            .attr("class", "line")
            .attr("d", function(d,i) { var scale=scales(i); return scale(d); })
            .style("stroke", function(d,i) { return colors[i]; });

      svg.append("g")
        .attr('class','date_line')
        .attr("transform", "translate(0," + height + ")")
        .call(d3.svg.axis()
            .scale(x)
            .orient("bottom")
            .ticks(1)
            .tickSize(-height, 0, 0)
            .tickFormat("")
        );

      legend_output = "<table class='graph_legend'><tr><th width=\"75%\"></th><th>Max</th><th>Ave</th><th>Cur</th></tr>";
      data['files'].forEach(function(d, i) {
          var si_format = d3.format('.3s');
          var last = data['values'][i];
          var cur = si_format(get_value(last[last.length - 1]));
          var max = si_format(d3.max(data['values'][i], function(d) { return get_value(d); }));
          var avg = si_format(d3.mean(data['values'][i], function(d) { return get_value(d); }));
          var color = colors[i];
          legend_output = legend_output + "<tr style=\"color:" + color + "\"><td>" + d + "</td><td>"+max+
                                          "</td><td>"+avg+"</td><td>"+cur+"</td></tr>";
      });
      legend_output = legend_output + "</table>";
      document.getElementsByClassName(legend)[0].innerHTML = legend_output;
    });
}
@@ chart.html.ep
<!DOCTYPE html>
<head>
<meta charset="utf-8">
<title>multiple files</title>
%= stylesheet '/graph.css'
</head>
%= javascript 'https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js'
<script>window.d3 || document.write( '<script src="/js/d3.v3.js" >\x3c/script>' );</script>
%= javascript '/graph.js'

% my $graph = begin
    % my ($stop,$span,$graph_count,$files,$scale) = @_;
    <div class="graph_timespan"><h2><%= localtime($stop-$span) %> --- <%= localtime($stop) %><br></h2></div>

    <div class="graph_svg graph_count_<%= $graph_count %>"></div>
    <div class="graph_legend_<%= $graph_count %>"></div>

    <script> graph('.graph_count_<%= $graph_count %>', 'graph_legend_<%= $graph_count %>', '<%== url_for('/data')->query('files' => $files, stop => $stop, span => $span); %>', <%= $scale %>); </script>
% end

%my $graph_count=0;
% foreach my $rtr (sort keys %$routers) {
    % foreach my $iface (keys %{$routers->{$rtr}}) {
        <div class="graph_title">
        <%= link_to url_for->query(net => $net, file => "$rtr/$iface.in") => begin %><h1>Interface Utilization Chart<br><%= $rtr %><br></h1><% end %>
        </div>
        <div class="graph_desc"><h2><%= $iface %><br><%= $routers->{$rtr}->{$iface}->{desc} %></h2></div><br><br>

        % if (!defined($span) && scalar keys %$routers == 1) {
            %   for (@{[{ 'Day trend' => 86400 }, {'Week Trend' => 86400*7}, {'Month Trend' => 86400*30 }]}) {
            %      my ($k, $v) = each %$_;  $span = $v;
                   <div class="graph_period"><h2><%= $k %></h2></div><br>
            %=     $graph->($stop, $span, $graph_count++, $routers->{$rtr}->{$iface}->{files}, $routers->{$rtr}->{$iface}->{scale});
            % }
        % } else {
        %=    $graph->($stop, $span, $graph_count++, $routers->{$rtr}->{$iface}->{files}, $routers->{$rtr}->{$iface}->{scale});
        % }
    % }
% }

@@ graph.css

body {
  font: 12px times;
}

.area {
    fill: lightsteelblue;
    stroke-width: 0;
}

.axis path,
.axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

.x.axis path {
  display: none;
}

.line {
    fill: none;
    stroke-width: 1.5px;
}

.date_line .tick {
  stroke: black;
  stroke-opacity: 0.7;
  shape-rendering: crispEdges;
}
.date_line path {
    stroke-width: 0;
}

.grid .tick {
  stroke: lightgrey;
  stroke-opacity: 0.7;
  shape-rendering: crispEdges;
}
.grid path {
    stroke-width: 0;
}

.graph_title {
    text-align: center;
}

.graph_desc {
    text-align: center;
}

.graph_period {
    text-align: center;
}

.graph_timespan {
    text-align: center;
}

.graph_svg {
    text-align: center;
}

.graph_legend {
    width:960px;
    margin-left: auto;
    margin-right: auto;
}

.graph_legend th, td {
    text-align: left;
}

