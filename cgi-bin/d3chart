#!/usr/bin/perl

use strict;
use warnings;
use CIBH::Datafile;
use Mojolicious::Lite;
use Time::Local;
use CIBH::Config qw / $default_options /;

app->secrets(['Change this if you run standalone']);
app->config(hypnotoad => {listen => ['http://*:80']});

my $opts = {
    %{$default_options},
};

get '/' => sub { $_[0]->render('chart'); };

get '/*path/data' => sub {
        my $self=shift;
        my $stop = $self->param('stop') || time;
        my $span = $self->param('span') || 86400;
        my $node = $self->param('file') || 'bb2-56-mar/Vlan1204.out';
        my ($rtr,$file) = ($node =~/^(.*)\/(.*)$/);
        my ($config)=do "$opts->{config_path}/$rtr.snmp.config";
        my $iface = $config->{$rtr}->{$file}->{iface};
        my $output;
        foreach my $file (keys %{$config->{$rtr}}) {
            no warnings 'uninitialized';
            if ($config->{$rtr}->{$file}->{iface} eq $iface || $config->{$rtr}->{$file}->{cpuave} == 5) {
                my $fn=$opts->{data_path} ."/$rtr/$file";

                $file =~ s/.*\.(in|out)$/$1/; 
                map { $output->{$_->[0]}->{$file}=$_->[1]; $output->{$_->[0]}->{time}=$_->[0]; } @{CIBH::Datafile->new(filename=>$fn)->GetValues($stop-$span, $stop)};
           }
        }
        my @array;
        # reformat the data from the 3 files as an array
        foreach my $time (sort keys %{$output}) {
            push(@array, $output->{$time});
        }
        $array[0]->{scale}=$config->{$rtr}->{$file}->{max};
        $array[0]->{span}=$span;
        return $self->render(json => \@array); 
};

app->start;

__DATA__
@@ chart.html.ep
<!DOCTYPE html>
<meta charset="utf-8">
<style>

body {
  font: 12px times;
}

.area {
    fill: lightsteelblue;
    stroke-width: 0;
}

.axis path,
.axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

.x.axis path {
  display: none;
}

.line {
  fill: none;
  stroke: steelblue;
  stroke-width: 1.5px;
}

.date_line .tick {
  stroke: black;
  stroke-opacity: 0.7;
  shape-rendering: crispEdges;
}
.date_line path {
  stroke-width: 0;
}

.grid .tick {
  stroke: lightgrey;
  stroke-opacity: 0.7;
  shape-rendering: crispEdges;
}
.grid path {
  stroke-width: 0;
}

</style>
<body>
<script src="http://d3js.org/d3.v3.js"></script>
<script>window.d3 || document.write( '<script src="/js/d3.v3.js" >\x3c/script>' );</script>
<script>

var params = window.location.search.substring(1);

var margin = {top: 20, right: 40, bottom: 30, left: 50},
    width = 960 - margin.left - margin.right,
    height = 500 - margin.top - margin.bottom;

var x = d3.time.scale()
    .range([0, width]);

var y = d3.scale.linear()
    .range([height, 0]);

var y1 = d3.scale.linear()
    .range([height,0]);

var xAxis = d3.svg.axis()
    .scale(x)
    .orient("bottom");

var yAxis = d3.svg.axis()
    .scale(y)
    .tickFormat(d3.format(' s'))    // converts yAxis scale to SI units (10M instead of 10,000,000)
    .orient("left");

var yAxisRight = d3.svg.axis()
    .scale(y1)
    .orient("right");

var inputline = d3.svg.line()
    .defined(function(d) { return !isNaN(d['in']); })
    .x(function(d) { return x(d['time']); })
    .y(function(d) { return y(d['in']); });

var outputline = d3.svg.line()
    .defined(function(d) { return !isNaN(d['out']); })
    .x(function(d) { return x(d['time']); })
    .y(function(d) { return y(d['out']); });

var cpuline = d3.svg.line()
    .defined(function(d) { return !isNaN(d['cpu']); })  // FIXME: why are the first cpu values NaN?
    .x(function(d) { return x(d['time']); })
    .y(function(d) { return y1(d['cpu']); });

var area = d3.svg.area()
    .x(function(d) { return x(d['time']); })
    .y0(height)
    .y1(function(d) { return y(d['in']); });

var svg = d3.select("body").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

d3.json("d3chart/x/data?" + params, function(error, json_data) {
  var span = 1/(width - margin.left - margin.right) * json_data[0]['span'];
  var timebase = json_data[0]['time'];

  // this is like Datafile::Sample
  //   the idea is that we have samples from input, output or cpu that are recorded at different timestamps.
  //   if we don't do something about this we would have holes in the graphs, so we're going to average each
  //   of these based on our graph width and timespan interval.
  var data = d3.nest()
       .key(function(d) { if (d['time'] - timebase > span) { timebase = d['time'] }; return timebase; })
       .rollup(function(d) {
             return { in: d3.mean(d, function(g) { return +g['in']; }),
                      out: d3.mean(d, function(g) { return +g['out']; }),
                      cpu: d3.mean(d, function(g) { return +g['cpu.5m']; }) }
       }).entries(json_data);

  data.forEach(function(d) {
       d['time'] = new Date(d.key*1000);
       d['in'] = +d.values['in'];
       d['out'] = +d.values['out'];
       d['cpu'] = +d.values['cpu'];
       console.log(d['cpu']);
  });

  x.domain(d3.extent(data, function(d) { return d['time']; }));
  y.domain([0, json_data[0]['scale'] ]);
  y1.domain([0, 100 ]);

  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis);

  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis);

  svg.append("g")
      .attr("class", "y axis")
      .attr("transform", "translate(" + width + " ,0)")
      .style("fill", "red")
      .call(yAxisRight);

  svg.append("g")
    .attr("class", "grid")
    .call(d3.svg.axis()
        .scale(y1)
        .orient("left")
        .ticks(10)
        .tickSize(-width, 0, 0)
        .tickFormat("")
    );

  svg.append("path")
      .datum(data)
      .attr("class", "area")
      .attr("d", area);

  svg.append("path")
      .datum(data)
      .attr("class", "line")
      .attr("d", inputline);

  svg.append("path")
      .datum(data)
      .attr("class", "line")
      .style("stroke", "green")
      .attr("d", outputline);

  svg.append("path")
      .attr("class", "line")
      .style("stroke", "red")
      .attr("d", cpuline(data));

  svg.append("g")
    .attr('class','date_line')
    .attr("transform", "translate(0," + height + ")")
    .call(d3.svg.axis()
        .scale(x)
        .orient("bottom")
        .ticks(1)
        .tickSize(-height, 0, 0)
        .tickFormat("")
    );


});
</script>
