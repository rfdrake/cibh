#!/usr/bin/perl

use strict;
use warnings;
use Mojolicious::Lite;
use Time::Local;
use CIBH::Config qw / $default_options /;
use CIBH::DS;
use CIBH::SNMP qw ( load_snmp_config );
use CIBH::Chart;

app->secrets(['Change this if you run standalone']);
app->config(hypnotoad => {listen => ['http://*:80']});

my $opts = $default_options;
my $ds = CIBH::DS::load_ds($opts->{datastore});

helper BuildImgRef => sub {
    my($self,$start,$net,$host,$metric,$scale)=(@_);
    # I'm pretty sure this stop param is never used.
    my $stop=$self->param('stop');
    my $url=$self->url_for->query(host => $host, metric => $metric, mode => 'image', 'start' => $start, net => $net, scale => $scale);
    $url.="&stop=$stop" if defined $stop;
    $stop=time if $stop<=0;
    $start+=$stop if $start<0;
    my $id="map$start$host".join('',@$metric);
    $id=~s/\W//g;
    my $dt=localtime($start) . " --- " . localtime($stop) . "<br>\n";
    return "$dt<img src=\"$url\" usemap=\#$id border=0>\n".
        "<map name=$id>\n".
            $self->ImageMap($start,$stop).
                "</map>\n";
};

helper ImageMap => sub {
    my($self,$start,$stop)=(@_);
    my $tmp=CIBH::Chart->new('no_image'=>1);
    my($ax,$ay,$bx,$by)=$tmp->CanvasCoords;
    my($boxes,$i,$rval)=(25,0);
    my($step,$timestep)=((($bx-$ax)/$boxes),(($stop-$start)/$boxes));
    my $url= $self->url_for->query(file => $self->param('file'));
    $url.="&net=".$self->param('net') if defined $self->param('net');
    $url.="&span=".($stop-$start); # force single graph mode
    $start+=($stop-$start)/2;
    for($i=0;$i<$boxes;$i++) {
        my $x1=int($ax+$i*$step);
        my $x2=int($x1+$step);
        my($nurl)=$url."&stop=".int($start+$i*$timestep);
        $rval.="<area shape=rect href=\"$nurl\" coords=\"$x1,$by,$x2,$ay\">\n";
    }
    return $rval;
};

sub ZoomUrl {
  my($url,$nspan,$ospan)=(@_);
  my($stop)=($url=~/\&stop=(\d+)/);
  $url=~s/&span=\d+//;
  $url=~s/&stop=\d+//;
  $url=~s/&start=\d+//;
  $stop+=int($nspan/2-$ospan/2);
  $nspan=int($nspan);
  $url.="\&span=$nspan";
  $url.="\&stop=$stop";
  return $url;
}

helper ZoomControl => sub {
  my($self,$spn)=(@_);
  my $url=$self->req->url->to_abs;
  my($rval)='<ul id="zoom_control"><li>out</li>';
  my $l='<i class="arr-left"></i>';
  my $r='<i class="arr-right"></i>';
  my(@s)=($spn*15,$spn*5,$spn*2,int($spn/2),int($spn/5),int($spn/15));

  $rval .= "<li><a href=".ZoomUrl($url,$s[0],$spn).">$l</a></li>\n";
  $rval .= "<li><a href=".ZoomUrl($url,$s[1],$spn).">$l</a></li>\n";
  $rval .= "<li><a href=".ZoomUrl($url,$s[2],$spn).">$l</a></li>\n";
  $rval .= '<li>zoom</li>';
  $rval .= "<li><a href=".ZoomUrl($url,$s[3],$spn).">$r</a></li>\n";
  $rval .= "<li><a href=".ZoomUrl($url,$s[4],$spn).">$r</a></li>\n";
  $rval .= "<li><a href=".ZoomUrl($url,$s[5],$spn).">$r</a></li>\n";
  $rval .= "<li>in</li>\n</ul>";
  return $rval;
};

# need to change this so it parses net if it's passed
helper DrawChart => sub {
    my $self=shift;
    my $chart=CIBH::Chart->new;
    my $stop=$self->param('stop');
    my $start=$self->param('start');
    my $host=$self->param('host');
    my $scale=$self->param('scale');

    $stop=time if($stop eq 'now' or $stop==0);
    $start+=$stop if ($start<0); # negative value is relative
    $start=$stop-86400 if($self->param('start')==0);
    # right axis is 0-100
    $chart->YAxis(mode=>"right,grid");
    $chart->YAxis(mode=>'left',max=>$scale);
    $scale=1/$scale;
    $chart->XAxis(start=>$start,stop=>$stop,mode=>"top,bottom");
    $chart->Threshold(color=>"200,0,0",pos=>$opts->{threshold})
      if ($opts->{threshold});
    my(@colors)=("50,50,255","0,255,0","230,120,90");
    my(@modes)=("fill3d","line","line");
    my($str)=[[.5,"Max"],[.7,"Ave"],[.9,"Last"]];
    $chart->PrintText("0,0,0",$str);
    my $i = 0;
    for (@{$self->every_param('metric')}) {
        if ($_ eq 'cpu.5m' || $_ eq 'cpu.1m') {
            $scale=1/100;
        }
        my $in=$ds->new(opts => $opts, host => $host, metric => $_);
        next if !defined $in->{handle};

        my $in_values = $in->GetValues($start,$stop);
        my($ave,$max,$aveval,$maxval,$curr)=
            $chart->Sample($in_values,$start,$stop,$scale);
        my($u_scale,$u_label)=CIBH::Chart::GetUnits(0,$aveval,1);

        $aveval=sprintf("%.2f$u_label",$aveval*$u_scale);
        ($u_scale,$u_label)=CIBH::Chart::GetUnits(0,$maxval,1);
        $maxval=sprintf("%.2f$u_label",$maxval*$u_scale);
        ($u_scale,$u_label)=CIBH::Chart::GetUnits(0,$curr,1);
        $curr=sprintf("%.2f$u_label",$curr*$u_scale);


        my($str)=[[0,$_],[.5,$maxval],[.7,$aveval],[.9,$curr]];

#        $chart->Chart($max,mode=>$modes[$i],color=>Chart::Bright($colors[$i]));
        $chart->Chart($ave,mode=>$modes[$i],color=>$colors[$i],labels=>$str);

        $i++;
    }
    $chart->XAxis(start=>$start,stop=>$stop,mode=>"grid",interval=>2,
                  color=>"200,20,0");

    $self->res->headers->content_type('image/png');
    $self->render(data => $chart->png);
};

helper build_chart_list => sub {
    my $self = shift;
    my $rtr = $self->param('rtr');
    $self->stash(rtr => $rtr);
    my $config=load_snmp_config($rtr,$opts);
    my $files = ();
    my $done;
    foreach my $file (sort (keys %{$config->{$rtr}})) {
        next if not defined $config->{$rtr}->{$file}->{iface};
        my $iface=$config->{$rtr}->{$file}->{iface};
        next if $done->{$iface};
        push(@$files, { file => "$rtr/$file", iface => $iface,
                       desc => $config->{$rtr}->{$file}->{desc},
                       addr => $config->{$rtr}->{$file}->{addr},
                       prefix => $config->{$rtr}->{$file}->{prefix}
                     });
        $done->{$iface}=1;
    }
    push(@$files, { file => "$rtr/cpu.1m", iface => 'CPU', desc => "cpu utilization on $rtr" });
    my @all = map { $_->{file} } @$files;
    push(@$files, { file => join(',',@all), iface => 'All' });

    $self->stash(files => $files);
    return $self->render('chartlist');
};

helper show_charts => sub {
    my ($self, $opts) = @_;
    my $rtrs;
    my $stop = $self->param('stop') || time;
    my $span = $self->param('span');
    my $size = $self->param('size') || $opts->{graph_size} || '960,500';
    my $files = $self->every_param('file');
    if ($files->[0] =~ /,/ && scalar @$files == 1) {
        $files = [ split(/,/, $files->[0]) ];
    }

    # default to one day, single graph display
    my $graphs = [ { '' => $span || -86400 } ];

    # if they only ask for one file then give them day,week,month
    if (scalar @$files == 1 && !defined($span)) {
        $graphs = [
                { 'Day trend' => -86400 },
                { 'Week Trend' => -86400*7 },
                { 'Month Trend' => -86400*30 }
        ];
    }
    $self->stash(graphs => $graphs);

    foreach my $filepath (@$files) {
        next if ($filepath =~ m#^/|\.\.#);
        my ($rtr,$file) = ($filepath =~/^(.*)\/(.*)$/);

        next if (! -f "$opts->{config_path}/$rtr.snmp.config");
        my $config=load_snmp_config($rtr,$opts);
        my $iface = $config->{$rtr}->{$file}->{iface};
        next if ($rtrs->{$rtr}->{$iface});  # We already processed this

        my @metrics;
        no warnings 'uninitialized';
        foreach my $m (sort keys %{$config->{$rtr}}) {
            if ($config->{$rtr}->{$m}->{iface} eq $iface) {
                push(@metrics, $m);
            }
        }

        # if the interface doesn't exist we need to not add CPU
        next if (scalar @metrics == 0);
        foreach my $m (keys %{$config->{$rtr}}) {
            if ($config->{$rtr}->{$m}->{cpuave} == 5) {
                push(@metrics, $m);
            }
        }

        $rtrs->{$rtr}->{$iface}->{metrics}=\@metrics;
        $rtrs->{$rtr}->{$iface}->{scale}=$config->{$rtr}->{$file}->{max};
        $rtrs->{$rtr}->{$iface}->{desc}=$config->{$rtr}->{$file}->{desc};
    }

    my ($width, $height) = split(',', $size);
    $self->stash(width => $width, height => $height);

    $self->stash(span => $span, stop => $stop, routers => $rtrs);
    return $self->render('chart');
};

helper get_router_list => sub {
    my ($self, $opts) = @_;
    my(@hosts)=glob("$opts->{config_path}/*.snmp.config");
    $self->stash('files' => [map { my ($f)=($_=~ /$opts->{config_path}\/(.*)\.snmp\.config/); } @hosts]);
    return $self->render('rtrlist');
};

get '/' => sub {
    my $self = shift;

    my $network = $self->param('net') || $opts->{network};
    $self->stash(net => $network);
    my ($data) = ($opts->{data_path} =~ m#(.*)/\S+/snmp#);
    if (! -d "$data/$network") {
        # return error if the directory doesn't exist to prevent eval'ing strange things.
        return $self->render(template => "exception", status => 501 );
    }
    $opts->{network} = $network;
    $opts->{data_path}=eval "\"$opts->{data_path}\"";
    $opts->{config_path}=eval "\"$opts->{config_path}\"";
    $self->res->headers->expires('now');
    return $self->DrawChart() if ($self->param('mode') eq 'image');

    # chartlist, for when a router is specified but no chart
    if ($self->param('rtr') && !$self->param('file')) {
        return $self->build_chart_list();
    }

    # rtrlist, for when no router is specified.  This is the default view
    if (!$self->param('file')) {
        return $self->get_router_list($opts);
    }

    return $self->show_charts($opts);
};

app->start;

__DATA__
@@ rtrlist.html.ep
<!doctype html>
<html>
<head>
<title>Available Routers</title>
</head>
<style>
div#columns {
    padding: 0px 10% 0px 10%;
}

div#columns ul {
    -webkit-columns: 120px 10;
       -moz-columns: 120px 10;
            columns: 120px 10;
         list-style: none;
             margin: 0;
            padding: 0;
}
</style>
<body>
<center><h1>Available Routers</h1></center>
<div id="columns">
<ul>
% foreach my $file (@$files) {
<li><%= link_to url_for->query(rtr => $file )->to_abs => begin %><%= $file %><% end %></li>
% }
</ul>
</div>
</body>
</html>
@@ chartlist.html.ep
<!doctype html>
<html>
<head>
<title>Available Charts</title>
</head>
<body>
<style>
td#header {
    background-color: #99cccc;
    text-align: center;
    font-size: 1.5em;
    margin: .75em 0;
    padding: 1em 0 1em 0;
    font-weight: bold;
}

td {
    background-color: #cccccc;
}

th {
    background-color: #99cccc;
}
</style>
<table>
<tr><td id="header" colspan=4>Charts available on <%= $rtr %></td></tr>
<tr><th>Name</th><th>Description</th><th>Address</th><th>Network</th></tr>
% foreach my $file (@$files) {
<tr><td>
<%= link_to url_for->query(rtr => $rtr, file => $file->{file} )->to_abs => begin %><%= $file->{iface} %><% end %></td>
<td><%= $file->{desc} %></td>
<td><%= $file->{addr} %></td>
<td><%= $file->{prefix} %></td>
</tr>
% }

</table>
</body>
</html>
@@ chart.html.ep
<!DOCTYPE html>
<head>
<meta charset="utf-8">
<title>multiple files</title>
%= stylesheet '/graph.css'
</head>

<div id="main">
% foreach my $rtr (sort keys %$routers) {
    % foreach my $iface (keys %{$routers->{$rtr}}) {
        <div class="graph_title">
        <%= link_to url_for->query(net => $net, file => "$rtr/$iface.in") => begin %>Interface Utilization Chart<br><%= $rtr %><br><% end %>
        </div>
        <div class="graph_desc"><%= $iface %><br><%= $routers->{$rtr}->{$iface}->{desc} %></div>

        % my $metric = $routers->{$rtr}->{$iface}->{metrics};
        % my $scale = $routers->{$rtr}->{$iface}->{scale};
        % if (!defined($span) && scalar keys %$routers == 1) {
            %   for (@$graphs) {
            %      my ($header, $span) = each %$_;
                   <h2><%= $header %></h2><br>
                    <%== BuildImgRef($span,$net,$rtr,$metric,$scale); %>
            % }
        % } else {
                <%== BuildImgRef($span,$net,$rtr,$metric,$scale); %><br>
                <%== ZoomControl($span); %><br>
        % }
    % }
% }
</div>

@@ graph.css

#main {
    text-align:center;
}

.graph_title {
    display: block;
    font-size: 2em;
    font-weight: bold;
    padding: 1.5em;
}

.graph_desc {
    display: block;
    font-size: 1.5em;
    font-weight: bold;
}

ul#zoom_control li {
    display:inline;
}

ul#zoom_control li a {
    padding: 5px 10px;
    text-decoration: none;
    color: black;
}

/* RESPONSIVE ARROWS */
[class^=arr-]{
  border:       solid currentColor;
  border-width: 0 .2em .2em 0;
  display:      inline-block;
  padding:      .20em;
}
.arr-right {transform:rotate(-45deg);}
.arr-left  {transform:rotate(135deg);}
.arr-up    {transform:rotate(-135deg);}
.arr-down  {transform:rotate(45deg);}
